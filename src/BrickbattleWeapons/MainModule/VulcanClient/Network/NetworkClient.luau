--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.16 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		superballCreate = table.freeze({
			Fire = noop
		}),
		superballCreateReplicate = table.freeze({
			SetCallback = noop
		}),
		superballUpdate = table.freeze({
			Fire = noop
		}),
		superballReplicate = table.freeze({
			SetCallback = noop
		}),
		superballHit = table.freeze({
			Fire = noop
		}),
		pelletCreate = table.freeze({
			Fire = noop
		}),
		pelletCreateReplicate = table.freeze({
			SetCallback = noop
		}),
		pelletUpdate = table.freeze({
			Fire = noop
		}),
		pelletReplicate = table.freeze({
			SetCallback = noop
		}),
		pelletHit = table.freeze({
			Fire = noop
		}),
		paintballCreate = table.freeze({
			Fire = noop
		}),
		paintballCreateReplicate = table.freeze({
			SetCallback = noop
		}),
		paintballUpdate = table.freeze({
			Fire = noop
		}),
		paintballReplicate = table.freeze({
			SetCallback = noop
		}),
		paintballHit = table.freeze({
			Fire = noop
		}),
		paintballExplodeReplicate = table.freeze({
			SetCallback = noop
		}),
		rocketCreate = table.freeze({
			Fire = noop
		}),
		rocketCreateReplicate = table.freeze({
			SetCallback = noop
		}),
		rocketUpdate = table.freeze({
			Fire = noop
		}),
		rocketReplicate = table.freeze({
			SetCallback = noop
		}),
		rocketExplode = table.freeze({
			Fire = noop
		}),
		rocketExplodeReplicate = table.freeze({
			SetCallback = noop
		}),
		bombCreate = table.freeze({
			Fire = noop
		}),
		bombCreateReplicate = table.freeze({
			SetCallback = noop
		}),
		bombUpdate = table.freeze({
			Fire = noop
		}),
		bombReplicate = table.freeze({
			SetCallback = noop
		}),
		bombExplode = table.freeze({
			Fire = noop
		}),
		bombExplodeReplicate = table.freeze({
			SetCallback = noop
		}),
		swordGripUpdate = table.freeze({
			Fire = noop
		}),
		trowelPlace = table.freeze({
			Fire = noop
		}),
		deleteProjectile = table.freeze({
			Fire = noop
		}),
		deleteProjectileReplicate = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")
local reliable = remotes:WaitForChild("ZAP_RELIABLE")
local unreliable = remotes:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(32)
local event_queue: { [number]: { any } } = table.create(32)
event_queue[2] = {}
event_queue[4] = {}
event_queue[7] = {}
event_queue[9] = {}
event_queue[12] = {}
event_queue[14] = {}
event_queue[16] = {}
event_queue[18] = {}
event_queue[20] = {}
event_queue[22] = {}
event_queue[24] = {}
event_queue[26] = {}
event_queue[28] = {}
event_queue[32] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 2 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[2] then
				task.spawn(events[2], value)
			else
				table.insert(event_queue[2], value)
				if #event_queue[2] > 64 then
					warn(`[ZAP] {#event_queue[2]} events in queue for superballCreateReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 7 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[7] then
				task.spawn(events[7], value)
			else
				table.insert(event_queue[7], value)
				if #event_queue[7] > 64 then
					warn(`[ZAP] {#event_queue[7]} events in queue for pelletCreateReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 12 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.color = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[12] then
				task.spawn(events[12], value)
			else
				table.insert(event_queue[12], value)
				if #event_queue[12] > 64 then
					warn(`[ZAP] {#event_queue[12]} events in queue for paintballCreateReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 16 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[16] then
				task.spawn(events[16], value)
			else
				table.insert(event_queue[16], value)
				if #event_queue[16] > 64 then
					warn(`[ZAP] {#event_queue[16]} events in queue for paintballExplodeReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 18 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local angle_1 = axisangle_1.Magnitude
			if angle_1 ~= 0 then
				value.cFrame = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
			else
				value.cFrame = CFrame.new(pos_1)
			end
			if events[18] then
				task.spawn(events[18], value)
			else
				table.insert(event_queue[18], value)
				if #event_queue[18] > 64 then
					warn(`[ZAP] {#event_queue[18]} events in queue for rocketCreateReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 22 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			value.distance = buffer.readu16(incoming_buff, read(2))
			if events[22] then
				task.spawn(events[22], value)
			else
				table.insert(event_queue[22], value)
				if #event_queue[22] > 64 then
					warn(`[ZAP] {#event_queue[22]} events in queue for rocketExplodeReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 24 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[24] then
				task.spawn(events[24], value)
			else
				table.insert(event_queue[24], value)
				if #event_queue[24] > 64 then
					warn(`[ZAP] {#event_queue[24]} events in queue for bombCreateReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 28 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[28] then
				task.spawn(events[28], value)
			else
				table.insert(event_queue[28], value)
				if #event_queue[28] > 64 then
					warn(`[ZAP] {#event_queue[28]} events in queue for bombExplodeReplicate. Did you forget to attach a listener?`)
				end
			end
		elseif id == 32 then
			local value
			value = {}
			value.projectileType = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value.projectileType = "Superball"
			elseif enum_value_1 == 1 then
				value.projectileType = "Pellet"
			elseif enum_value_1 == 2 then
				value.projectileType = "Paintball"
			elseif enum_value_1 == 3 then
				value.projectileType = "Rocket"
			elseif enum_value_1 == 4 then
				value.projectileType = "Bomb"
			elseif enum_value_1 == 5 then
				value.projectileType = "Wall"
			else
				error("Invalid enumerator")
			end
			value.count = buffer.readu16(incoming_buff, read(2))
			incoming_ipos = incoming_ipos + 1
			value.player = incoming_inst[incoming_ipos]
			assert(value.player ~= nil)
			if events[32] then
				task.spawn(events[32], value)
			else
				table.insert(event_queue[32], value)
				if #event_queue[32] > 64 then
					warn(`[ZAP] {#event_queue[32]} events in queue for deleteProjectileReplicate. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 4 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		incoming_ipos = incoming_ipos + 1
		value.player = incoming_inst[incoming_ipos]
		assert(value.player ~= nil)
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		if events[4] then
			task.spawn(events[4], value)
		else
			table.insert(event_queue[4], value)
			if #event_queue[4] > 64 then
				warn(`[ZAP] {#event_queue[4]} events in queue for superballReplicate. Did you forget to attach a listener?`)
			end
		end
	elseif id == 9 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		incoming_ipos = incoming_ipos + 1
		value.player = incoming_inst[incoming_ipos]
		assert(value.player ~= nil)
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		if events[9] then
			task.spawn(events[9], value)
		else
			table.insert(event_queue[9], value)
			if #event_queue[9] > 64 then
				warn(`[ZAP] {#event_queue[9]} events in queue for pelletReplicate. Did you forget to attach a listener?`)
			end
		end
	elseif id == 14 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		incoming_ipos = incoming_ipos + 1
		value.player = incoming_inst[incoming_ipos]
		assert(value.player ~= nil)
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		if events[14] then
			task.spawn(events[14], value)
		else
			table.insert(event_queue[14], value)
			if #event_queue[14] > 64 then
				warn(`[ZAP] {#event_queue[14]} events in queue for paintballReplicate. Did you forget to attach a listener?`)
			end
		end
	elseif id == 20 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		incoming_ipos = incoming_ipos + 1
		value.player = incoming_inst[incoming_ipos]
		assert(value.player ~= nil)
		value.distance = buffer.readu16(incoming_buff, read(2))
		if events[20] then
			task.spawn(events[20], value)
		else
			table.insert(event_queue[20], value)
			if #event_queue[20] > 64 then
				warn(`[ZAP] {#event_queue[20]} events in queue for rocketReplicate. Did you forget to attach a listener?`)
			end
		end
	elseif id == 26 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		incoming_ipos = incoming_ipos + 1
		value.player = incoming_inst[incoming_ipos]
		assert(value.player ~= nil)
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.tickTime = buffer.readf32(incoming_buff, read(4))
		if events[26] then
			task.spawn(events[26], value)
		else
			table.insert(event_queue[26], value)
			if #event_queue[26] > 64 then
				warn(`[ZAP] {#event_queue[26]} events in queue for bombReplicate. Did you forget to attach a listener?`)
			end
		end
	else
		error("Unknown event id")
	end
end)
local returns = {
	SendEvents = SendEvents,
	superballCreate = {
		Fire = function(Value: ({
			count: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
		end,
	},
	superballUpdate = {
		Fire = function(Value: ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	superballHit = {
		Fire = function(Value: ({
			count: (number),
			hitPart: ((Instance)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			if Value.hitPart == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.hitPart)
			end
		end,
	},
	pelletCreate = {
		Fire = function(Value: ({
			count: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
		end,
	},
	pelletUpdate = {
		Fire = function(Value: ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	pelletHit = {
		Fire = function(Value: ({
			count: (number),
			hitPart: ((Instance)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			if Value.hitPart == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.hitPart)
			end
		end,
	},
	paintballCreate = {
		Fire = function(Value: ({
			count: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
		end,
	},
	paintballUpdate = {
		Fire = function(Value: ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	paintballHit = {
		Fire = function(Value: ({
			count: (number),
			position: (Vector3),
			hitPart: ((Instance)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			if Value.hitPart == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.hitPart)
			end
		end,
	},
	rocketCreate = {
		Fire = function(Value: ({
			count: (number),
			cFrame: (CFrame),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 17)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			local axis_1, angle_1 = Value.cFrame:ToAxisAngle()
			axis_1 = axis_1 * angle_1
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
		end,
	},
	rocketUpdate = {
		Fire = function(Value: ({
			count: (number),
			packetCount: (number),
			distance: (number),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	rocketExplode = {
		Fire = function(Value: ({
			count: (number),
			distance: (number),
			explodedParts: ({ ((Instance)?) }),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local len_1 = #Value.explodedParts
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.explodedParts[i_1]
				if val_1 == nil then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				else
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					table.insert(outgoing_inst, val_1)
				end
			end
		end,
	},
	bombCreate = {
		Fire = function(Value: ({
			count: (number),
			position: (Vector3),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 23)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
		end,
	},
	bombUpdate = {
		Fire = function(Value: ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
			tickTime: (number),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 25)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.tickTime)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	bombExplode = {
		Fire = function(Value: ({
			count: (number),
			position: (Vector3),
			explodedParts: ({ ((Instance)?) }),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 27)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local len_1 = #Value.explodedParts
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.explodedParts[i_1]
				if val_1 == nil then
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 0)
				else
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					table.insert(outgoing_inst, val_1)
				end
			end
		end,
	},
	swordGripUpdate = {
		Fire = function(Value: ({
			grip: ("Out" | "Up" | "Down"),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 29)
			if Value.grip == "Out" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif Value.grip == "Up" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			elseif Value.grip == "Down" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	trowelPlace = {
		Fire = function(Value: ({
			cFrame: (CFrame),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 30)
			local axis_1, angle_1 = Value.cFrame:ToAxisAngle()
			axis_1 = axis_1 * angle_1
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
		end,
	},
	deleteProjectile = {
		Fire = function(Value: ({
			projectileType: ("Superball" | "Pellet" | "Paintball" | "Rocket" | "Bomb" | "Wall"),
			count: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 31)
			if Value.projectileType == "Superball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif Value.projectileType == "Pellet" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			elseif Value.projectileType == "Paintball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			elseif Value.projectileType == "Rocket" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			elseif Value.projectileType == "Bomb" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			elseif Value.projectileType == "Wall" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			else
				error("Invalid enumerator")
			end
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
		end,
	},
	superballCreateReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ()): () -> ()
			events[2] = Callback
			for _, value in event_queue[2] do
				task.spawn(Callback, value)
			end
			event_queue[2] = {}
			return function()
				events[2] = nil
			end
		end,
	},
	superballReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			packetCount: (number),
			player: (Instance),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ()): () -> ()
			events[4] = Callback
			for _, value in event_queue[4] do
				task.spawn(Callback, value)
			end
			event_queue[4] = {}
			return function()
				events[4] = nil
			end
		end,
	},
	pelletCreateReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ()): () -> ()
			events[7] = Callback
			for _, value in event_queue[7] do
				task.spawn(Callback, value)
			end
			event_queue[7] = {}
			return function()
				events[7] = nil
			end
		end,
	},
	pelletReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			packetCount: (number),
			player: (Instance),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ()): () -> ()
			events[9] = Callback
			for _, value in event_queue[9] do
				task.spawn(Callback, value)
			end
			event_queue[9] = {}
			return function()
				events[9] = nil
			end
		end,
	},
	paintballCreateReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		})) -> ()): () -> ()
			events[12] = Callback
			for _, value in event_queue[12] do
				task.spawn(Callback, value)
			end
			event_queue[12] = {}
			return function()
				events[12] = nil
			end
		end,
	},
	paintballReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			packetCount: (number),
			player: (Instance),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ()): () -> ()
			events[14] = Callback
			for _, value in event_queue[14] do
				task.spawn(Callback, value)
			end
			event_queue[14] = {}
			return function()
				events[14] = nil
			end
		end,
	},
	paintballExplodeReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			position: (Vector3),
		})) -> ()): () -> ()
			events[16] = Callback
			for _, value in event_queue[16] do
				task.spawn(Callback, value)
			end
			event_queue[16] = {}
			return function()
				events[16] = nil
			end
		end,
	},
	rocketCreateReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			cFrame: (CFrame),
		})) -> ()): () -> ()
			events[18] = Callback
			for _, value in event_queue[18] do
				task.spawn(Callback, value)
			end
			event_queue[18] = {}
			return function()
				events[18] = nil
			end
		end,
	},
	rocketReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			packetCount: (number),
			player: (Instance),
			distance: (number),
		})) -> ()): () -> ()
			events[20] = Callback
			for _, value in event_queue[20] do
				task.spawn(Callback, value)
			end
			event_queue[20] = {}
			return function()
				events[20] = nil
			end
		end,
	},
	rocketExplodeReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			distance: (number),
		})) -> ()): () -> ()
			events[22] = Callback
			for _, value in event_queue[22] do
				task.spawn(Callback, value)
			end
			event_queue[22] = {}
			return function()
				events[22] = nil
			end
		end,
	},
	bombCreateReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			position: (Vector3),
		})) -> ()): () -> ()
			events[24] = Callback
			for _, value in event_queue[24] do
				task.spawn(Callback, value)
			end
			event_queue[24] = {}
			return function()
				events[24] = nil
			end
		end,
	},
	bombReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			packetCount: (number),
			player: (Instance),
			position: (Vector3),
			velocity: (Vector3),
			tickTime: (number),
		})) -> ()): () -> ()
			events[26] = Callback
			for _, value in event_queue[26] do
				task.spawn(Callback, value)
			end
			event_queue[26] = {}
			return function()
				events[26] = nil
			end
		end,
	},
	bombExplodeReplicate = {
		SetCallback = function(Callback: (Value: ({
			count: (number),
			player: (Instance),
			position: (Vector3),
		})) -> ()): () -> ()
			events[28] = Callback
			for _, value in event_queue[28] do
				task.spawn(Callback, value)
			end
			event_queue[28] = {}
			return function()
				events[28] = nil
			end
		end,
	},
	deleteProjectileReplicate = {
		SetCallback = function(Callback: (Value: ({
			projectileType: ("Superball" | "Pellet" | "Paintball" | "Rocket" | "Bomb" | "Wall"),
			count: (number),
			player: (Instance),
		})) -> ()): () -> ()
			events[32] = Callback
			for _, value in event_queue[32] do
				task.spawn(Callback, value)
			end
			event_queue[32] = {}
			return function()
				events[32] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
